package Tom;

require 5.004;  	# this can be turned off with very little modification to
			# the module.

use Carp;
use protect;

BEGIN { $^W = 0; }	# Force Warnings off - stop warns about other
			# peoples sillycode.

# Mechanism modules
use Data::Dumper;	# Storage Mechanism

use UNIVERSAL;		# Used to make sure the object is nice enough to
			# belong to the same class as that contained.

BEGIN {	# 'magical' support for both versions of MD5 that I know of.
	eval "use Crypt::MD5";
	if ($@) {
		eval "use MD5";
		if ($@) {
			print "You have neither MD5 nor Crypt::MD5 installed.";
			print "\nMakeMaker should have trapped this...";
			print "\nThis is what is a problem.  I'm going to die\n";
			$Tom::die = 1;
		}
	}
}

if ($Tom::die) {
	exit(1);
}

# Exporter stuff
use Exporter;
@ISA = qw ( Exporter );
@EXPORT_OK = qw ( repair cc );

$VERSION = '2.00';
$SUBVERSION = '';

# Misc stuff for TOM
$Tom::debug = 0;

#################################################### PRIVATE FUNCTIONS ######
sub domagic {
	is private;

	my $self = shift;
	my $fnc  = shift;
	eval "package $self->{Class}; sub $self->{Class}::$fnc $self->{$fnc}";
	if ($@) {
		return 0;
	} else { return 1 }
}

################################################### PUBLIC FUNCTIONS ########
sub new {
	is public;
	my ($class, %args) = @_;
	my $self = {};

	$self->{Class} = $args{Class};
	$self->{FunctionCnt} = 0;
	$self->{Functions} = ();
	bless $self, $class;
}

sub declare {
	my $self = shift;
	my %args = @_;
	print "Declaring $self->{Class}::$args{Name}\n" if $Tom::debug;
	$self->{$args{Name}} = $args{Code};
	$self->{Functions}[$self->{FunctionCnt}] = $args{Name};
	eval "package $self->{Class}; sub $self->{Class}::$args{Name} $args{Code}";
	$self->{FunctionCnt}++;
}

sub get_object {
	my $self = shift;
	my %args = @_;
	return eval $self->{Object};
}

sub methods {
	my $self = shift;
	return $self->{Functions};
}

sub main ($$) {
	my $self = shift;
	$self->{'main'} = shift;
}


sub insert {
	my $self = shift;
	my $obj = shift;
	unless ($obj->isa($self->{Class}) || !$self->{Class}) {
		croak("ERROR: object must be blessed into contained class");
	}
	if ($self->{FunctionCnt} == 0) {
		my $module = ref($obj);
		print STDERR "Attempting to compile Tom Class $module\n" if $Tom::debug;
		foreach $_ (@INC) {
			$module =~ s/::/\//g;
			print "Looking in $_ for $module.pm\n" if $Tom::debug;
			if (-e "$_/$module.pm") {
				print "Found $module.pm!\n" if $Tom::debug;
				open(FILE, "$_/$module.pm") || 
					warn "cannot open $_/$module.pm";
				local $/ = undef;
				my $data = <FILE>;
				close FILE;
				my ($object, @data) = cc($data);
				unless (ref($object) eq ref($self)) {
					print "Object is a ", ref($object),"\n";
				}
				$object->insert($obj);
				return $object;
			}
		}
	}
	$self->{Object} = Dumper($obj);	
}

sub class {
	my $self = shift;
	if (@_) { $self->{Class} = shift; }
	return $self->{Class};
}

sub register {
	my $self = shift;
	my %args = @_;
	
	if ($args{Compartment}) {
		print "Securely registering function\n" if $Tom::debug;
		my $cpt = $args{Compartment};
		my $fnc;
		if ($self->{'BEGIN'}) {
			$cpt->reval("package $self->{Class}; $self->{'BEGIN'}");
			if ($@) {
				croak("ERROR: $@");
			}
		}
		if ($self->{'main'}) {
			$cpt->reval("package $self->{Class}; $self->{'main'}");
			if ($@) {
				croak("ERROR: $@");
			}
		}
		foreach my $fnc (@{$self->{Functions}}) {
			$cpt->reval("package $self->{Class}; sub $self->{Class}::$fnc $self->{$fnc}");
			if ($@) {
				croak("ERROR: $@");
			}
		}
		if ($self->{import}) {
			$cpt->reval("$self->{Class}::import();");
		}
		if ($self->{Object}) {
			$cpt->reval("my $obj = eval \"$self->{Object}\"\n");
		}
	} else {
		my $fnc;
		if ($self->{'BEGIN'}) {
			eval "package $self->{Class}; $self->{'BEGIN'}";
			if ($@) {
				croak("ERROR: $@");
			}
		}
		if ($self->{'main'}) {
			eval "package $self->{Class}; $self->{'main'}";
			if ($@) {
				croak("ERROR: $@");
			}
		}
		foreach my $fnc (@{$self->{Functions}}) {
			print "Registering $self->{Class}::$fnc\n" if $Tom::debug;
			unless (domagic($self, $fnc)) {
				print "WARNING: Could not register $self->{Class}::$fnc\n";
			}
		}
		if ($self->{import}) {
			eval "$self->{Class}::import();";
		}
		if ($self->{Object}) {
			return eval "$self->{Object}";
		}
		
	}
}

sub checksum {
	my $self = shift;

	my $middle = pack("u",Dumper($self));

	my $md = new MD5;
	$md->reset();
	$md->add($middle);
	return $md->hexdigest();
}

sub store {
	my ($self, %args) = @_;
	my $class;

	$class = $self->{Class};
	my $top = "-- Tom $Tom::VERSION ($Tom::SUBVERSION) Class: $class --\n";
	my $middle = pack("u",Dumper($self));

	my $md = new MD5;
	$md->reset();
	$md->add($middle);
	my $digest = unpack("H*", $md->digest());
	$digest .= "\n";
	my $package = $top . $digest . $middle . $top;

	# this effectively deletes the object's class, but if the user wants
	# to keep using the object... not good.
 #	$self->cleanup();

	return $package;
}

# repairs the shipped object, back into a real object.
sub repair {
	my $package = shift;
	my @code = split(/^/, $package);
	my $top = shift @code;
	my $declmd = shift @code;
	my $bottom = pop @code;

	chop $declmd;

	my $md = new MD5;
	$md->reset();
	# test for equal delimiters - check MD5 digest if they match
	unless ($top eq $bottom) {
		croak("ERROR: Delimiters do not match");
		exit(1);
	} else {
		my $data = join('',@code);

		$md->add($data);
		my $dig = unpack("H*", $md->digest());

		unless ($dig eq $declmd) {
			croak (
		"ERROR: MD5 Digests do not match\nDiscarding container");
		}
		
		my $me = eval unpack('u', $data);
		if ($@) { print "ERROR: $@\n"; exit(2) }
		if ($Tom::debug > 1) {
			print("Object:\n" , ref($me));
		}
		unless(ref($me) eq 'Tom') {
			warn "Object contained within container is not of class Tom";
		}
		return $me;
	}
}

sub debug {
	my $self = shift;
	$Tom::debug = shift;
}

sub cc {
	my $code = shift;
	my @first = split(/^/, $code);
	my (@second,@final,@classes,$skip,$cnt,$classcnt,%classhash);
	my $ccline = 1;
	# first pass, remove the pod documents.
	foreach $_ (@first) {
		if(/^=(.*)/) {
			if ($1 ne 'cut') {
				$skip = 1;
			} else {
				$skip = 0;
			}
		}
		unless($skip) {
			$second[$cnt] = $_;
		}		
		$cnt++;
	}
	# reset the skip and counter variable
	$skip = 0; $cnt = 0;
	# second pass, remove anything after a __(.*)__ tag.
	foreach $_ (@second) {
		if(/^__(.*)__/) {
			$skip = 1;
		}
		unless ($skip) {
			$final[$cnt] = $_;
		}
		$cnt++;
	}
	# reset the skip and counter variables
	$skip = 0; $cnt = 0;
	# set up variables specific to the third pass
	my ($subcatch, $maincatch, $output, $argument, $caught);
	my ($classname, $funcname);
	# third pass: catch routines and directives
	foreach $_ (@final) {
		if ( /^(\bpackage\b) (.*);/ ) {
			$classname = $2;
			$classhash{$classname} = $classcnt;
			$classcnt++;
			$classes[$classhash{$classname}] = new Tom 
					Class => $classname;
			print "Generating Class: $classname\n" if $Tom::debug;
		} elsif ( /^sub (.*) {/ ) {
			$subcatch = 1;
			$funcname = $1;
			print "Caching sub: $funcname\n" if $Tom::debug;
		} elsif (($subcatch) && !(/^}/)) {
			$caught .= $_;
		} elsif ( /^}/ ) {
			if ($subcatch) {
				$subcatch = 0;
				$classes[$classhash{$classname}]->declare(
					Name => $funcname,
					Code => '{' . $caught . '}'
				);
				print "Adding method $funcname, resetting cache\n" if $Tom::debug;
				$caught = ''; 
			} else {
				print "Adding code to main\n" if $Tom::debug;
				$classes[$classhash{$classname}]->{'main'} .= $_;
			}
		} elsif ( /directive (.*) ('||")(.*)(\2);/ ) {
			print "directive detected ($1,$3)\n" if $Tom::debug;
			if ($1 eq 'output') {
				$output = $3;
			} elsif ($1 eq 'argument') {
				$argument = $3;
			}
		} elsif ( /import (.*);/ ) {
			$classes[$classhash{$classname}]->{"__$1"} = 1;
		} 
		else {
			print "Adding code to main\n" if $Tom::debug;
			$classes[$classhash{$classname}]->{'main'} .= $_;
		}
		$ccline++;
	}
	unless ($output) {
		$output = 'std';
	}
	unless ($argument) {
		$argument = 'std';
	}
	return @classes;
}

sub cleanup {
	my ($self, %args) = @_;
	my $hash = \%{"$self->{Class}::"};
	# my $func;
	# foreach $func (keys(%{$hash})) {
	foreach my $func (keys(%{$hash})) {
		print "Deleting function $func\n" if $Tom::debug;
		delete $hash->{$func};
	}
}

1;


__END__

=head1 NAME

TOM - Transportable Object model for Perl

=head1 DESCRIPTION

Tom allows for distributed perl objects.  It does not require that an
object's class exists on the machine in order for the object to be used.

=head1 SYNOPSIS

  use Tom qw ( repair );

  my $tom = new Tom Class => 'Demo';

  $tom->declare(Name => 'new', Code => '{ 
	my $class = shift;
	my $self = {};
	bless $self, $class;
  }');

  $tom->declare(Name => 'setname', Code => '{
	my $self = shift;
	$self->{name} = shift;
  }');

  $tom->register();

  my $obj = new Demo;
  $obj->setname('james duncan');

  $tom->insert($obj);

  $data = $tom->store();
  print $data;
  my $newtom = repair($data);


=head1 new

C<new> creates a new object of the TOM class.  This is your container for
any module.  It accepts only one argument, and that is the I<class> that the
container will hold.

=head1 insert

C<insert> takes one argument - the object that you wish to make
transportable. If there are no methods for the the object you insert, Tom
will try to find the .pm file that corresponds to that particular object. 
If it is able to, then it also attempts to compile all the methods in that
class into the Tom object.

=head1 declare

C<declare> lets you add functions to the class that will be stored inside
the container.  It accepts two arguments I<Name>, which is the name of the
function, and I<Code> which contains the code that the function uses.

Declaring a function inside the container also declares it outside the
container, allowing you to create the object at the same time, without
having to call C<register> in order to do so. 

=head1 register

C<register> takes a TOM container, and allows its methods to be accessible
from within Perl.  If an object exists within the container,  C<register>
will return the object.

If C<register> is called with the Compartment variable specified then all
of Tom's registering takes place within the safe compartment referenced by the
Compartment variable.

In addition, if there is an 'import' subroutine declared within the class,
Tom will execute the code stored within as soon as it has registered the
functions.

=head1 get_object

C<get_object> returns the object stored within the container, but doesn't
register the class on the local machine, which will cause problems unless
you have already used the C<register> method. 

=head1 store

C<store> returns a transportable version of the TOM container.

=head1 repair

C<repair> takes one argument. This argument is a TOM container that has
been C<store>'ed.  It returns a Perl object that is the TOM container.

=head1 debug

C<debug> sets the debug level for TOM.  Used for development.

=head1 cleanup

C<cleanup> deletes the functions registered from the TOM container into a
namespace, preventing problems in the case of TOM execution servers. 

=head1 methods

C<methods> returns an ARRAY of the functions inside the TOM container. 

=head1 NIGGLY BITS (or BUGS)

Tom cannot pull subs out of the air - it tries its best, but quite often, it
will fail.  Once a construct similar to the following exists in perl, it'll
be another story.

	sub somesub is cached ($$) {
		...
	}

Because then we could say:

  my $var = cached(&somesub);

Which could get the code that forms the sub.

I am also experimenting with performing this with bytecode at present.

=head1 MAILING LIST

A mailing list has been set up for Tom and other perl-related Agent
projects,  called Perl5-Agents.  The request address for this mailing list
is perl5-agents-request@daft.com. To send mail to the list email
perl5-agents@daft.com.  

=head1 SEE ALSO

perl(1), perlobj(1)

=head1 AUTHOR

James Duncan <jduncan@hawk.igs.net>

Thanks to the following people for help with various things:
	(Many Bug Reports)    Mike Blakely <mikeb@netscape.com>
	(Many suggestions)    Steve Purkis <spurkis@engsoc.carleton.ca>
	(P5A Mailing list)    Darran Stalder <torin@daft.com>

=cut
